{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/FormsUI/AutoCompleteSearchMultiple/index.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EACL,YAAY,EAEZ,QAAQ,EACR,SAAS,GACV,MAAM,eAAe,CAAC;AAevB,MAAM,iCAAiC,GAEnC,CAAC,EACH,IAAI,EACJ,KAAK,EACL,cAAc,EACd,aAAa,EACb,QAAQ,EACR,GAAG,UAAU,CAAC,wBAAwB;EACvC,EAAE,EAAE;IACH,MAAM,EAAE,aAAa,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAE,CAAC;IACrD,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,QAAQ,CAAW,IAAI,CAAC,CAAC;IAC/C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW;QAC3D,GAAG,KAAK,CAAC,KAAK;KACf,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG;QACtB,GAAG,KAAK;QACR,GAAG,UAAU;QACb,KAAK,EAAE,KAAK;QACZ,UAAU,EAAE,EAAE;KACf,CAAC;IAEF,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QACvC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC;QAC7B,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,CACL,KAAC,YAAY,IACX,QAAQ,QACR,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,KAAK,EACf,WAAW,EAAE,KAAK,EAClB,QAAQ,EAAE,QAAQ,EAClB,oBAAoB,EAAE,IAAI,EAC1B,qBAAqB,EAAE,KAAK,EAC5B,aAAa,EAAC,kBAAkB,EAChC,OAAO,EAAE,cAAc,CAAC,IAAI,IAAI,EAAE,EAClC,cAAc,EAAE,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,EAAE,KAAK,IAAI,MAAM,EACxD,OAAO,EAAE,cAAc,CAAC,UAAU,EAClC,oBAAoB,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK;gBAAE,OAAO,KAAK,CAAC;YACpC,OAAO,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;QACtC,CAAC,EACD,KAAK,EACH,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,EAEtE,QAAQ,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE;YAChC,IACE,OAAO,QAAQ,KAAK,QAAQ;gBAC5B,CAAC,MAAM,KAAK,cAAc,IAAI,MAAM,KAAK,cAAc,CAAC,EACxD,CAAC;gBACD,IAAI,YAAY,CAAC;gBACjB,IAAI,MAAM,KAAK,cAAc,EAAE,CAAC;oBAC9B,YAAY,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CACrD,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CACjE,CAAC;gBACJ,CAAC;qBAAM,IAAI,MAAM,KAAK,cAAc,EAAE,CAAC;oBACrC,YAAY,GAAG,QAAQ,CAAC;gBAC1B,CAAC;gBAED,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,EACD,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,MAAM,EAAE,EAAE;YACnD,IAAI,MAAM,KAAK,OAAO,EAAE,CAAC;gBACvB,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE,CAAC;oBACrD,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC9C,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACpC,CAAC;gBACD,aAAa,CACX,aAAa,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CACrE,CAAC;YACJ,CAAC;QACH,CAAC,EAAE,GAAG,CAAC;QACP,uCAAuC;QACvC,4BAA4B;QAC5B,wCAAwC;QACxC,4EAA4E;QAC5E,SAAS;QACT,MAAM;QACN,oBAAoB;QACpB,KAAK;QACL,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CACvB,KAAC,SAAS,OACJ,MAAM,KACN,eAAe,EACnB,KAAK,EAAE,KAAK,EACZ,WAAW,EAAC,gBAAgB;YAC5B,mBAAmB;YACnB,wDAAwD;YACxD,kDAAkD;YAClD,OAAO;YACP,6BAA6B;YAC7B,gCAAgC;YAChC,MAAM;YACN,KAAK;YACL,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE;gBACnB,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;oBAC1B,KAAK,CAAC,cAAc,EAAE,CAAC;gBACzB,CAAC;YACH,CAAC,GACD,CACH,EACD,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GACb,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,iCAAiC,CAAC","sourcesContent":["import React from \"react\";\r\nimport { useField, useFormikContext } from \"formik\";\r\nimport {\r\n  Autocomplete,\r\n  AutocompleteProps,\r\n  debounce,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { UseQueryResult } from \"@tanstack/react-query\";\r\ntype Option = {\r\n  value: string | number;\r\n  label: string;\r\n};\r\n\r\ntype AutoCompleteSearchMultipleWrapperProps = {\r\n  name: string;\r\n  label: string;\r\n  useQueryResult: UseQueryResult<Option[], Error>;\r\n  setInputValue: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n  disabled?: boolean;\r\n} & Partial<AutocompleteProps<any, any, any, any>>;\r\n\r\nconst AutoCompleteSearchMultipleWrapper: React.FC<\r\n  AutoCompleteSearchMultipleWrapperProps\r\n> = ({\r\n  name,\r\n  label,\r\n  useQueryResult,\r\n  setInputValue,\r\n  disabled,\r\n  ...otherProps // Capture unknown props\r\n}) => {\r\n  const { setFieldValue, values } = useFormikContext();\r\n  const [field, meta] = useField<Option[]>(name);\r\n  const [prevValues, setPrevValues] = React.useState<Option[]>([\r\n    ...field.value,\r\n  ]);\r\n\r\n  const configTextField = {\r\n    ...field,\r\n    ...otherProps,\r\n    error: false,\r\n    helperText: \"\",\r\n  };\r\n\r\n  if (meta && meta.touched && meta.error) {\r\n    configTextField.error = true;\r\n    configTextField.helperText = meta.error;\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      limitTags={2}\r\n      freeSolo={false}\r\n      clearOnBlur={false}\r\n      disabled={disabled}\r\n      disableCloseOnSelect={true}\r\n      filterSelectedOptions={false}\r\n      noOptionsText=\"Search not found\"\r\n      options={useQueryResult.data ?? []}\r\n      getOptionLabel={(option: any) => option?.label || option}\r\n      loading={useQueryResult.isFetching}\r\n      isOptionEqualToValue={(option, value) => {\r\n        if (!option || !value) return false;\r\n        return option.value === value.value;\r\n      }}\r\n      value={\r\n        typeof field.value === \"string\" ? [...prevValues] : [...field.value]\r\n      }\r\n      onChange={(_, newValue, reason) => {\r\n        if (\r\n          typeof newValue !== \"string\" &&\r\n          (reason === \"selectOption\" || reason === \"removeOption\")\r\n        ) {\r\n          let uniqueValues;\r\n          if (reason === \"selectOption\") {\r\n            uniqueValues = [...field.value, newValue.at(-1)].filter(\r\n              (v, i, arr) => arr.findIndex((o) => o?.value === v?.value) === i\r\n            );\r\n          } else if (reason === \"removeOption\") {\r\n            uniqueValues = newValue;\r\n          }\r\n\r\n          setFieldValue(field.name, uniqueValues);\r\n        }\r\n      }}\r\n      onInputChange={debounce((_, newInputValue, reason) => {\r\n        if (reason === \"input\") {\r\n          if (values && typeof values[field.name] !== \"string\") {\r\n            setFieldValue(field.name, values[field.name]);\r\n            setPrevValues(values[field.name]);\r\n          }\r\n          setInputValue(\r\n            newInputValue === \"\" ? undefined : newInputValue.slice(0, 10).trim()\r\n          );\r\n        }\r\n      }, 300)}\r\n      // filterOptions={(options, state) => {\r\n      //   if (state.inputValue) {\r\n      //     return options.filter((option) =>\r\n      //       option.label.toLowerCase().includes(state.inputValue.toLowerCase())\r\n      //     );\r\n      //   }\r\n      //   return options;\r\n      // }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          {...configTextField}\r\n          label={label}\r\n          placeholder=\"Select Batches\"\r\n          // onBlur={(e) => {\r\n          //   const isValidSelection = useQueryResult.data?.some(\r\n          //     (option) => option.label === e.target.value\r\n          //   );\r\n          //   if (!isValidSelection) {\r\n          //     setInputValue(undefined);\r\n          //   }\r\n          // }}\r\n          onKeyDown={(event) => {\r\n            if (event.key === \"Enter\") {\r\n              event.preventDefault();\r\n            }\r\n          }}\r\n        />\r\n      )}\r\n      sx={{ mt: 1 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AutoCompleteSearchMultipleWrapper;\r\n"]}