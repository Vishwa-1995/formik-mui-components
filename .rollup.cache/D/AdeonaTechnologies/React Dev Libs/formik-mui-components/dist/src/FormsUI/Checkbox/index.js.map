{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/FormsUI/Checkbox/index.tsx"],"names":[],"mappings":";AACA,OAAO,WAAW,MAAM,2BAA2B,CAAC;AACpD,OAAO,SAAS,MAAM,yBAAyB,CAAC;AAChD,OAAO,gBAAgB,MAAM,gCAAgC,CAAC;AAC9D,OAAO,QAAQ,MAAM,wBAAwB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,GAAG,MAAM,mBAAmB,CAAC;AACpC,OAAO,KAAK,MAAM,qBAAqB,CAAC;AACxC,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAS/C,MAAM,eAAe,GAAmC,CAAC,EACvD,IAAI,EACJ,MAAM,EACN,kBAAkB,GAAG,GAAG,EAAE,GAAE,CAAC,EAC7B,GAAG,UAAU,EACd,EAAE,EAAE;IACH,MAAM,EAAE,aAAa,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAErC,MAAM,YAAY,GAAG,CAAC,GAAwC,EAAE,EAAE;QAChE,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC7B,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG;QACrB,GAAG,KAAK;QACR,GAAG,UAAU;QACb,QAAQ,EAAE,YAAY;KACvB,CAAC;IAEF,MAAM,iBAAiB,GAAoD,EAAE,CAAC;IAC9E,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QAC/B,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;QAC/B,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,CACL,MAAC,WAAW,eACV,KAAC,SAAS,cACR,MAAC,KAAK,IAAC,SAAS,EAAC,KAAK,aACpB,KAAC,gBAAgB,IACf,OAAO,EAAE,KAAC,QAAQ,OAAK,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,GAAI,EAC/D,KAAK,EAAC,EAAE,GACR,EACF,KAAC,GAAG,IAAC,EAAE,EAAE,GAAG,YAAG,MAAM,GAAO,IACtB,GACE,EACZ,KAAC,cAAc,OAAK,iBAAiB,GAAmB,IAC5C,CACf,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import React from \"react\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport { useField, useFormikContext } from \"formik\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { FormHelperText } from \"@mui/material\";\r\n\r\ninterface CheckboxWrapperProps {\r\n  name: string;\r\n  legend: React.ReactNode;\r\n  customHandleChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  [key: string]: any;\r\n}\r\n\r\nconst CheckboxWrapper: React.FC<CheckboxWrapperProps> = ({\r\n  name,\r\n  legend,\r\n  customHandleChange = () => {},\r\n  ...otherProps\r\n}) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field, meta] = useField(name);\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { checked } = evt.target;\r\n    setFieldValue(name, checked);\r\n    customHandleChange(evt);\r\n  };\r\n\r\n  const configCheckbox = {\r\n    ...field,\r\n    ...otherProps,\r\n    onChange: handleChange,\r\n  };\r\n\r\n  const configFormControl: { error?: boolean; children?: React.ReactNode } = {};\r\n  if (meta.touched && meta.error) {\r\n    configFormControl.error = true;\r\n    configFormControl.children = meta.error;\r\n  }\r\n\r\n  return (\r\n    <FormControl>\r\n      <FormGroup>\r\n        <Stack direction=\"row\">\r\n          <FormControlLabel\r\n            control={<Checkbox {...configCheckbox} checked={field.value} />}\r\n            label=\"\"\r\n          />\r\n          <Box mt={1.5}>{legend}</Box>\r\n        </Stack>\r\n      </FormGroup>\r\n      <FormHelperText {...configFormControl}></FormHelperText>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CheckboxWrapper;\r\n"]}