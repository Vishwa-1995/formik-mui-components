{"version":3,"file":"index.js","sourceRoot":"","sources":["index.jsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,SAAS,MAAM,yBAAyB,CAAC;AAChD,OAAO,gBAAgB,MAAM,gCAAgC,CAAC;AAC9D,OAAO,MAAM,MAAM,sBAAsB,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AAEpD,MAAM,aAAa,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE;IACvD,MAAM,EAAE,aAAa,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAErC,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,EAAE;QAC3B,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC;QAC/B,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG;QACrB,GAAG,KAAK;QACR,GAAG,UAAU;QACb,QAAQ,EAAE,YAAY;KACvB,CAAC;IAEF,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7B,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QACvC,iBAAiB,CAAC,KAAK,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,OAAO,CACL,KAAC,WAAW,OAAK,iBAAiB,YAChC,KAAC,SAAS,cACR,KAAC,gBAAgB,IACf,OAAO,EAAE,KAAC,MAAM,OAAK,cAAc,EAAE,OAAO,EAAE,KAAK,CAAC,KAAK,GAAI,EAC7D,KAAK,EAAE,KAAC,UAAU,IAAC,OAAO,EAAC,OAAO,EAAC,KAAK,EAAC,eAAe,YAAE,KAAK,GAAc,GAC7E,GACQ,GACA,CACf,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import React from \"react\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { FormControl, Typography } from \"@mui/material\";\r\nimport { useField, useFormikContext } from \"formik\";\r\n\r\nconst SwitchWrapper = ({ name, label, ...otherProps }) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field, meta] = useField(name);\r\n\r\n  const handleChange = (evt) => {\r\n    const { checked } = evt.target;\r\n    setFieldValue(name, checked);\r\n  };\r\n\r\n  const configCheckbox = {\r\n    ...field,\r\n    ...otherProps,\r\n    onChange: handleChange,\r\n  };\r\n\r\n  const configFormControl = {};\r\n  if (meta && meta.touched && meta.error) {\r\n    configFormControl.error = true;\r\n  }\r\n\r\n  return (\r\n    <FormControl {...configFormControl}>\r\n      <FormGroup>\r\n        <FormControlLabel\r\n          control={<Switch {...configCheckbox} checked={field.value} />}\r\n          label={<Typography variant=\"body2\" color=\"textSecondary\">{label}</Typography>}\r\n        />\r\n      </FormGroup>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default SwitchWrapper;\r\n"]}