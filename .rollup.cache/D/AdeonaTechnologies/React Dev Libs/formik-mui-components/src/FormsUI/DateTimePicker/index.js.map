{"version":3,"file":"index.js","sourceRoot":"","sources":["index.jsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EACL,cAAc,EACd,oBAAoB;AACpB,wBAAwB;AACxB,wBAAwB;EACzB,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,YAAY,EAAE,MAAM,kCAAkC,CAAC;AAEhE,MAAM,qBAAqB,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE;IACxD,MAAM,EAAE,aAAa,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAErC,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,EAAE;QAC3B,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,gBAAgB,GAAG;QACvB,GAAG,KAAK;QACR,GAAG,UAAU;QACb,QAAQ,EAAE,YAAY;KACvB,CAAC;IAEF,MAAM,eAAe,GAAG;QACtB,OAAO,EAAE,UAAU;QACnB,SAAS,EAAE,IAAI;QACf,MAAM,EAAE,OAAO;KAChB,CAAC;IAEF,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QACvB,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC;QAC7B,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,CACL,KAAC,oBAAoB,IAAC,WAAW,EAAE,YAAY,YAC7C,KAAC,cAAc,IACb,WAAW,EAAC,WAAW,KACnB,gBAAgB,EACpB,WAAW,EAAE,IAAI,EACjB,KAAK,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,EACrD,SAAS,EAAE,EAAE,SAAS,EAAE,EAAE,GAAG,eAAe,EAAE,EAAE,GAChD,GACmB,CACxB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import { useField, useFormikContext } from \"formik\";\r\nimport {\r\n  DateTimePicker,\r\n  LocalizationProvider,\r\n  // MobileDateTimePicker,\r\n  // StaticDateTimePicker,\r\n} from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n\r\nconst DateTimePickerWrapper = ({ name, ...otherProps }) => {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field, meta] = useField(name);\r\n\r\n  const handleChange = (evt) => {\r\n    setFieldValue(name, evt);\r\n  };\r\n\r\n  const configTimePicker = {\r\n    ...field,\r\n    ...otherProps,\r\n    onChange: handleChange,\r\n  };\r\n\r\n  const configTextField = {\r\n    variant: \"outlined\",\r\n    fullWidth: true,\r\n    margin: \"dense\",\r\n  };\r\n\r\n  if (meta && meta.error) {\r\n    configTextField.error = true;\r\n    configTextField.helperText = meta.error;\r\n  }\r\n\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n      <DateTimePicker\r\n        orientation=\"landscape\"\r\n        {...configTimePicker}\r\n        ampmInClock={true}\r\n        views={[\"year\", \"day\", \"hours\", \"minutes\", \"seconds\"]}\r\n        slotProps={{ textField: { ...configTextField } }}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nexport default DateTimePickerWrapper;\r\n"]}