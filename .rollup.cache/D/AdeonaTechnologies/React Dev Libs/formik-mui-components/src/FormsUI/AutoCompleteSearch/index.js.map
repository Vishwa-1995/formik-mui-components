{"version":3,"file":"index.js","sourceRoot":"","sources":["index.tsx"],"names":[],"mappings":";AACA,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAGlF,MAAM,CAAC,OAAO,UAAU,yBAAyB,CAA2D,KAO3G;IACC,MAAM,EAAE,aAAa,EAAE,GAAG,gBAAgB,EAAE,CAAC;IAC7C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,QAAQ,CAAS,KAAK,CAAC,IAAI,CAAC,CAAC;IAEnD,SAAS,mBAAmB,CAAC,CAAuB;QAClD,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IACrI,CAAC;IAED,MAAM,eAAe,GAAG;QACtB,KAAK,EAAE,KAAK;QACZ,UAAU,EAAE,EAAE;KACf,CAAC;IAEF,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QACvC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC;QAC7B,eAAe,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,OAAO,CACL,KAAC,YAAY,IACX,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EACb,oBAAoB,EAAE,GAAG,EAAE,CAAC,IAAI,EAChC,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,aAAa,EAAC,kBAAkB,EAChC,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,IAAI,IAAI,EAAE,EACxC,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,cAAc,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EACxC,OAAO,EAAE,KAAK,CAAC,cAAc,CAAC,UAAU,EACxC,QAAQ,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC9D,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE;YAC3C,KAAK,CAAC,aAAa,CAAC,aAAa,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAC5F,CAAC,EAAE,GAAG,CAAC,EACP,WAAW,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CACvB,8BACE,KAAC,SAAS,OACJ,MAAM,EACV,OAAO,EAAC,UAAU,EAClB,SAAS,QACT,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE;wBACZ,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAChB,mBAAmB,CAAC,CAAC,CAAC,CAAC;oBACzB,CAAC,KACG,eAAe,EACnB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,UAAU,EAAE;wBACV,GAAG,MAAM,CAAC,UAAU;wBACpB,YAAY,EAAE,4BAAG,MAAM,CAAC,UAAU,CAAC,YAAY,GAAI;qBACpD,GACD,EACD,KAAK,CAAC,cAAc,CAAC,SAAS,IAAI,KAAC,cAAc,KAAG,IACpD,CACJ,GACD,CACH,CAAC;AACJ,CAAC","sourcesContent":["import React from \"react\";\r\nimport { useField, useFormikContext } from \"formik\";\r\nimport { Autocomplete, debounce, LinearProgress, TextField } from \"@mui/material\";\r\nimport { UseQueryResult } from \"@tanstack/react-query\";\r\n\r\nexport default function AutoCompleteSearchWrapper<Option extends { value: string | number; label: string }>(props: {\r\n  /**Formik field name*/\r\n  name: string;\r\n  label: string;\r\n  useQueryResult: UseQueryResult<Option[], Error>;\r\n  setInputValue: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n  disabled?: boolean;\r\n}) {\r\n  const { setFieldValue } = useFormikContext();\r\n  const [field, meta] = useField<Option>(props.name);\r\n\r\n  function handleTextFieldBlur(e: React.SyntheticEvent) {\r\n    setFieldValue(field.name, props.useQueryResult.data?.find((option) => option.label === e.target.value) ?? { value: 0, label: \"\" });\r\n  }\r\n\r\n  const configTextField = {\r\n    error: false,\r\n    helperText: \"\",\r\n  };\r\n\r\n  if (meta && meta.touched && meta.error) {\r\n    configTextField.error = true;\r\n    configTextField.helperText = meta.error;\r\n  }\r\n\r\n  return (\r\n    <Autocomplete<Option>\r\n      sx={{ mt: 1 }}\r\n      isOptionEqualToValue={() => true}\r\n      disabled={props.disabled}\r\n      noOptionsText=\"Search not found\"\r\n      options={props.useQueryResult.data ?? []}\r\n      value={field.value}\r\n      getOptionLabel={(option) => option.label}\r\n      loading={props.useQueryResult.isFetching}\r\n      onChange={(_, newValue) => setFieldValue(field.name, newValue)}\r\n      onInputChange={debounce((_, newInputValue) => {\r\n        props.setInputValue(newInputValue === \"\" ? undefined : newInputValue.slice(0, 10).trim());\r\n      }, 300)}\r\n      renderInput={(params) => (\r\n        <>\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            name={field.name}\r\n            onBlur={(e) => {\r\n              field.onBlur(e);\r\n              handleTextFieldBlur(e);\r\n            }}\r\n            {...configTextField}\r\n            label={props.label}\r\n            disabled={props.disabled}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: <>{params.InputProps.endAdornment}</>,\r\n            }}\r\n          />\r\n          {props.useQueryResult.isLoading && <LinearProgress />}\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n}\r\n"]}